<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="eval">

	<select id="getEvalchk" parameterType="map" resultType="map">
	/*getEvalchk*/
		SELECT 
		A.COMMISSIONER_SEQ
		, A.COMMITTEE_SEQ
		, A.EVA_JANG_CHK
		, A.SIGN_1
		, A.SIGN_2
		, A.SIGN_3
		, A.SIGN_4
		, A.SIGN_5
		, A.SIGN_6
		, A.SIGN_7
		, A.SIGN_8
		, A.SIGN_9
		, A.SIGN_10
		, A.CONTACT
		, A.SIGN_DIR
		, A.EVAL_CONFIRM
		, A.EVAL_JANG
		, A.TRANS_PAY
        , A.EVAL_PAY
        , A.EVAL_SAVE
		, A.EVAL_AVOID
		, A.EVAL_AVOID_CHECK_YN
		, C.NAME
		, C.BIRTH_DATE
		, D.BIZ_TYPE_ARRAY
		, D.TITLE
		, D.JANG_CONFIRM_YN
		, DATE_FORMAT(D.EVAL_S_DATE, '%Y-%m-%d') AS EVAL_S_DATE2
		, DATE_FORMAT(D.EVAL_E_DATE, '%Y-%m-%d') AS EVAL_E_DATE2
		, DATE_FORMAT(D.EVAL_S_DATE, '%Y년 %m월 %d일') AS EVAL_S_DATE3
		, DATE_FORMAT(D.EVAL_E_DATE, '%Y년 %m월 %d일') AS EVAL_E_DATE3
		, REPLACE(E.ORG_NAME, '\n', ' ') AS ORG_NAME
        , E.ORG_GRADE
        , E.BANK_NAME
        , E.BANK_NO
        , REPLACE(E.ORG_ADDR1, '\n', ' ') AS ORG_ADDR1
        , REPLACE(E.ORG_ADDR2, '\n', ' ') AS ORG_ADDR2
	    , D.EVAL_CM
        , D.RATES
        , D.JOIN_SELECT_TYPE
        , D.PURC_REQ_ID
        , EVAL_ID AS EVAL_USER_ID
		, (SELECT CASE WHEN COUNT(1) = 0 THEN 'N' ELSE 'Y' END FROM DJ_EVAL_COMMISSIONER WHERE COMMITTEE_SEQ = D.COMMITTEE_SEQ AND EVAL_JANG = 'Y') AS JANG
		, EVAL_BLIND_YN
		FROM CUST_EPIS.DJ_EVAL_COMMISSIONER A
		JOIN CUST_EPIS.DJ_COMMISSIONER_POOL C
		ON A.COMMISSIONER_POOL_SEQ = C.COMMISSIONER_POOL_SEQ
		AND C.ACTIVE = 'Y'
		JOIN CUST_EPIS.DJ_EVAL_COMMITTEE D
		ON A.COMMITTEE_SEQ = D.COMMITTEE_SEQ
		AND C.ACTIVE = 'Y'
		JOIN CUST_EPIS.DJ_COMMISSIONER_DETAIL E
        ON C.COMMISSIONER_POOL_SEQ = E.COMMISSIONER_POOL_SEQ
        WHERE A.EVAL_ID = #{evalId} AND A.EVAL_RANDOMPW = #{evalPw} AND D.TITLE =#{evalTitle}
		AND A.ACTIVE = 'Y'
		AND A.CONFIRM_YN = 'Y'
		/*AND A.ATTEND_YN = 'Y'*/
	</select>

	<update id="setSignDir" parameterType="map">
		UPDATE
			CUST_EPIS.DJ_EVAL_COMMISSIONER
		SET
			SIGN_DIR = #{signDir}
		WHERE
			COMMISSIONER_SEQ = #{commissioner_seq} AND ACTIVE = 'Y'
	</update>

	<select id="getResultList" parameterType="map" resultType="map">
	/*getResultList*/
		SELECT 
		A.EVAL_COMPANY_SEQ
		, A.COMMITTEE_SEQ
		, A.COMPANY_SEQ
		, A.DISPLAY_TITLE
		, B.ITEM_RESULT_SEQ
		, B.ITEM_SEQ
		, B.SCORE AS RESULT_SCORE
		, C.SCORE
		, C.ITEM_NAME
		, (SELECT SUM(EIR.SCORE) FROM CUST_EPIS.DJ_EVAL_ITEM_RESULT EIR WHERE EIR.EVAL_COMPANY_SEQ = A.EVAL_COMPANY_SEQ) AS SCORE_SUM
		 FROM CUST_EPIS.DJ_EVAL_COMPANY A
		JOIN CUST_EPIS.DJ_EVAL_ITEM_RESULT B
		ON A.EVAL_COMPANY_SEQ = B.EVAL_COMPANY_SEQ
		AND B.ACTIVE = 'Y'
		AND B.COMMISSIONER_SEQ = #{COMMISSIONER_SEQ}
		AND A.COMMITTEE_SEQ = #{COMMITTEE_SEQ}
		JOIN CUST_EPIS.DJ_EVAL_COMMITTEE_ITEM C
		ON B.ITEM_SEQ = C.ITEM_SEQ
		AND C.ACTIVE = 'Y'
		ORDER BY A.EVAL_COMPANY_SEQ, C.ITEM_SEQ
	</select>
	
	<select id="getCompanyList" parameterType="map" resultType="map">
	/*getCompanyList*/
	SELECT
		A.*,
		(
			SELECT
					SUM(EIR.SCORE) / (
					SELECT
						COUNT(DISTINCT EIR.commissioner_seq)
					FROM
						DJ_EVAL_ITEM_RESULT EIR
					WHERE
						EIR.EVAL_COMPANY_SEQ = A.EVAL_COMPANY_SEQ
					  AND EIR.SCORE IS NOT NULL
				)
			FROM
				DJ_EVAL_ITEM_RESULT EIR
			WHERE
				EIR.EVAL_COMPANY_SEQ = A.EVAL_COMPANY_SEQ
		) AS SCORE_SUM,
		(
			SELECT
				EC.eval_id
			FROM
				DJ_EVAL_COMMISSIONER EC
			WHERE
				EC.eval_jang = 'Y'
			  AND EC.COMMITTEE_SEQ = #{COMMITTEE_SEQ}
			 LIMIT 1
		) AS EVAL_ID
	FROM
		CUST_EPIS.DJ_EVAL_COMPANY A
	WHERE
		A.COMMITTEE_SEQ = #{COMMITTEE_SEQ};
	</select>

	<select id="getItemList" parameterType="map" resultType="map">
		/*getItemList*/
		SELECT
			ECI.*,
			DEIR.EVAL_COMPANY_SEQ,
			DEIR.SCORE AS COMMISSIONER_SCORE
		FROM
			CUST_EPIS.DJ_EVAL_COMMITTEE_ITEM ECI
				JOIN
			(
				SELECT
					DEIR.ITEM_SEQ,
					DEIR.SCORE,
					DEIR.COMMISSIONER_SEQ,
					DEIR.EVAL_COMPANY_SEQ,
					EC.COMMITTEE_SEQ
				FROM
					CUST_EPIS.DJ_EVAL_ITEM_RESULT DEIR
						JOIN
					CUST_EPIS.DJ_EVAL_COMPANY EC
					ON DEIR.EVAL_COMPANY_SEQ =  EC.EVAL_COMPANY_SEQ
			)DEIR
			ON ECI.COMMITTEE_SEQ = DEIR.COMMITTEE_SEQ AND ECI.ITEM_SEQ = DEIR.ITEM_SEQ
		WHERE
			ECI.COMMITTEE_SEQ = #{COMMITTEE_SEQ}
		  AND
			ECI.ACTIVE = 'Y'
		  AND
			DEIR.COMMISSIONER_SEQ= #{COMMISSIONER_SEQ}
		ORDER BY EVAL_COMPANY_SEQ, ECI.ITEM_SEQ ASC
	</select>

	<select id="getItemList2" parameterType="map" resultType="map">
	/*getItemList*/
		SELECT * FROM CUST_EPIS.DJ_EVAL_COMMITTEE_ITEM WHERE COMMITTEE_SEQ = #{COMMITTEE_SEQ}	AND ACTIVE = 'Y' ORDER BY ITEM_SEQ
	</select>


	
	<update id="setEvalViewUpdate" parameterType="map">
	/*setEvalViewUpdate*/
		UPDATE CUST_EPIS.DJ_EVAL_ITEM_RESULT SET SCORE = #{score} WHERE ITEM_RESULT_SEQ = #{item_result_seq}
	</update>

	<select id="getCompanyRemarkList" parameterType="map" resultType="map">
	/*getCompanyRemarkList*/
		SELECT A.DISPLAY_TITLE
		, B.* 
		FROM DJ_EVAL_COMPANY A
		JOIN DJ_EVAL_COMPANY_REMARK B
		ON A.EVAL_COMPANY_SEQ = B.EVAL_COMPANY_SEQ
		AND A.committee_seq = #{COMMITTEE_SEQ}
		AND B.COMMISSIONER_SEQ = #{COMMISSIONER_SEQ}
		AND B.ACTIVE = 'Y'
	</select>
	
	<update id="setEvalComRemarkUpdate" parameterType="map">
	/*setEvalComRemarkUpdate*/
		UPDATE DJ_EVAL_COMPANY_REMARK SET 
		REMARK = #{remark}
		WHERE COM_REMARK_SEQ = #{com_remark_seq}
	</update>

	<select id="getCommissionerList" parameterType="map" resultType="map">
	/*getCommissionerList*/
		SELECT A.*, B.NAME, C.SCORE_YN FROM DJ_EVAL_COMMISSIONER A
        JOIN DJ_COMMISSIONER_POOL B
        ON A.COMMISSIONER_POOL_SEQ = B.COMMISSIONER_POOL_SEQ
        JOIN DJ_EVAL_COMMITTEE C
        ON A.COMMITTEE_SEQ = C.COMMITTEE_SEQ
        AND A.COMMITTEE_SEQ = #{COMMITTEE_SEQ}
        AND A.ACTIVE = 'Y'
        AND B.ACTIVE = 'Y'
        AND A.CONFIRM_YN = 'Y'
        AND A.ATTEND_YN = 'Y'
        AND A.CONTACT = 'N'
	</select>
	
	<update id="setCommSave" parameterType="map">
	/*setCommSave*/
		UPDATE DJ_EVAL_COMMISSIONER SET
		EVAL_JANG_CNT = EVAL_JANG_CNT + 1
		WHERE COMMISSIONER_SEQ = #{commissioner_seq}
	</update>
	
	<update id="setCommjangChk" parameterType="map">
	/*setCommjangChk*/
		UPDATE DJ_EVAL_COMMISSIONER SET 
		EVA_JANG_CHK = 'Y'
		WHERE EVAL_ID_SEQ = (SELECT EVAL_ID_SEQ FROM DJ_EVAL_ID WHERE EVAL_USER_ID = #{evalId})
	</update>

	<select id="getChkList" parameterType="map" resultType="map">
	/*getChkList*/
		SELECT COUNT(*) userCnt, SUM(EVAL_JANG_CNT) cnt 
		FROM DJ_EVAL_COMMISSIONER
        WHERE COMMITTEE_SEQ = #{committee_seq}
        AND ACTIVE = 'Y'
        AND CONFIRM_YN = 'Y'
        AND ATTEND_YN = 'Y'
	</select>

    <update id="setEvalJangCntCn" parameterType="map">
        UPDATE CUST_EPIS.DJ_EVAL_COMMISSIONER
        SET
            EVAL_JANG_CNT = 0
        WHERE
            COMMITTEE_SEQ = #{committee_seq}
    </update>

	<update id="setEvalJangChkTie" parameterType="map">
		UPDATE CUST_EPIS.DJ_EVAL_COMMISSIONER
		SET
			EVA_JANG_CHK = 'O'
		WHERE
			COMMITTEE_SEQ = #{committee_seq}
	</update>

	<select id="getJangCnt" parameterType="map" resultType="int">
		SELECT COMMISSIONER_SEQ FROM DJ_EVAL_COMMISSIONER WHERE COMMITTEE_SEQ = #{committee_seq} AND ACTIVE = 'Y'
		AND EVAL_JANG_CNT = (SELECT MAX(EVAL_JANG_CNT) FROM DJ_EVAL_COMMISSIONER WHERE COMMITTEE_SEQ = #{committee_seq} AND ACTIVE = 'Y')
	</select>

	<update id="setJangUpdate" parameterType="map">
		<!--<selectKey order="BEFORE" keyProperty="updateSeq" resultType="int">
			SELECT COMMISSIONER_SEQ FROM DJ_EVAL_COMMISSIONER WHERE COMMITTEE_SEQ = #{committee_seq} AND ACTIVE = 'Y' 
        	AND EVAL_JANG_CNT = (SELECT MAX(EVAL_JANG_CNT) FROM DJ_EVAL_COMMISSIONER WHERE COMMITTEE_SEQ = #{committee_seq} AND ACTIVE = 'Y')
		</selectKey>-->
		/*setJangUpdate*/
		UPDATE DJ_EVAL_COMMISSIONER SET 
		    EVAL_JANG = 'Y'
		    , SIGN_10 = 'N'
		WHERE COMMISSIONER_SEQ = #{updateSeq}
	</update>

	<select id="getEvalJang" parameterType="map" resultType="string">
	/*getEvalJang*/
		SELECT CASE WHEN COUNT(1) = 0 THEN 'N' ELSE 'Y' END FROM DJ_EVAL_COMMISSIONER WHERE COMMITTEE_SEQ = #{committee_seq} AND ACTIVE = 'Y' AND EVAL_JANG = 'Y'
	</select>

	<select id="getEvalTieChk" parameterType="map" resultType="string">
		/*getEvalTieChk*/
		SELECT CASE WHEN COUNT(1) = 0 THEN 'N' ELSE 'Y' END FROM DJ_EVAL_COMMISSIONER WHERE COMMITTEE_SEQ = #{committee_seq} AND ACTIVE = 'Y' AND EVA_JANG_CHK = 'O'
	</select>

	<select id="getEvalId" parameterType="map" resultType="string">
		SELECT eval_id
		FROM DJ_EVAL_COMMISSIONER
		WHERE COMMITTEE_SEQ = #{committee_seq}
		  AND ACTIVE = 'Y'
		  AND EVAL_JANG = 'Y'
	</select>

	<update id="setSignSetp" parameterType="map">
	/*setSignSetp*/
		UPDATE
		    DJ_EVAL_COMMISSIONER
		SET
		    <if test='sign2Chk != null and !"".equals(sign2Chk)'>
				sign_2_minute1 = #{comboBox},
				sign_2_minute2 = #{comboBox1}
			</if>
			<if test='sign2Chk == null or "".equals(sign2Chk)'>
				${col_nm} = 'Y',
				${col_file} = #{attch_file_seq}
			</if>
			<if test='col_nm == "sign_4" and col_file == "sign_4_file_seq"'>
				,EVAL_AVOID_CHECK_YN = 'Y'
			</if>
		WHERE COMMISSIONER_SEQ = #{commissioner_seq}
	</update>


	<select id="getEvalJangData" parameterType="map" resultType="map">
	/*getEvalJangData*/
		SELECT * FROM DJ_EVAL_COMMISSIONER A
		JOIN DJ_COMMISSIONER_POOL B
		ON A.COMMISSIONER_POOL_SEQ = B.COMMISSIONER_POOL_SEQ
		AND A.COMMITTEE_SEQ = #{COMMITTEE_SEQ}
		AND A.EVAL_JANG = 'Y'
		AND A.ACTIVE = 'Y'
		AND B.ACTIVE = 'Y'
	</select>
	
	<update id="setEvalConfirm" parameterType="map">
	/*setEvalConfirm*/
		UPDATE DJ_EVAL_COMMISSIONER SET EVAL_CONFIRM = 'N' WHERE COMMITTEE_SEQ = #{committee_seq}
	</update>
	
	<select id="getEvalConfirmChk" parameterType="map" resultType="string">
	/*getEvalConfirmChk*/	
		SELECT CASE WHEN A.TOTAL = B.CPMFIRMCNT THEN 'Y' ELSE 'N' END FROM 
		(SELECT COUNT(1) TOTAL FROM DJ_EVAL_COMMISSIONER WHERE COMMITTEE_SEQ = #{COMMITTEE_SEQ} AND ACTIVE = 'Y') A, 
		(SELECT COUNT(1) CPMFIRMCNT FROM DJ_EVAL_COMMISSIONER WHERE COMMITTEE_SEQ = #{COMMITTEE_SEQ} AND EVAL_CONFIRM = 'Y' AND ACTIVE = 'Y') B
	</select>
	
	<select id="getEvalConfirmData" parameterType="map" resultType="map">
		/*getEvalConfirmData*/
		SELECT
		T.*,
		#{userCnt} AS USER_CNT,
		SUM(T.SUM_SCORE) AS TOTAL_ITEM_SUM,
		SUM(T.SUM_SCORE) / #{userCntTotal} AS TOTAL_SUM,
		<foreach collection="colList" item="col" separator=",">
			MAX(CASE WHEN T.ITEM_SEQ = #{col.item_seq} THEN T.SUM_SCORE END) AS ITME_SUM_SCORE_#{col.item_seq},
			MAX(CASE WHEN T.ITEM_SEQ = #{col.item_seq} THEN T.SUM_SCORE / #{userCntTotal} END) AS ITME_SCORE_#{col.item_seq}
		</foreach>,
		CASE
		WHEN TOTALS.TOTAL_SUM >= 85 THEN TOTALS.RANK
		ELSE '-'
		END AS RANK
		FROM (
		SELECT
		A.EVAL_COMPANY_SEQ,
		A.DISPLAY_TITLE,
		C.SCORE,
		C.ITEM_NAME,
		C.ITEM_SEQ,
		<choose>
			<when test='userCnt > 5 or score_yn == "Y"'>
				SUM(B.SCORE) - MAX(B.SCORE) - MIN(B.SCORE) AS SUM_SCORE
			</when>
			<otherwise>
				SUM(B.SCORE) AS SUM_SCORE
			</otherwise>
		</choose>
		FROM DJ_EVAL_COMPANY A
		JOIN DJ_EVAL_ITEM_RESULT B
		ON A.EVAL_COMPANY_SEQ = B.EVAL_COMPANY_SEQ
		AND A.COMMITTEE_SEQ = #{COMMITTEE_SEQ}
		AND B.ACTIVE = 'Y'
		JOIN DJ_EVAL_COMMITTEE_ITEM C
		ON B.ITEM_SEQ = C.ITEM_SEQ
		AND C.ACTIVE = 'Y'
		JOIN DJ_EVAL_COMMISSIONER D
		ON B.COMMISSIONER_SEQ = D.COMMISSIONER_SEQ
		AND D.EVAL_SAVE = 'Y'
		AND D.CONFIRM_YN = 'Y'
		AND D.CONTACT = 'N'
		AND D.ATTEND_YN = 'Y'
		AND D.EVAL_AVOID = 'N'
		GROUP BY A.EVAL_COMPANY_SEQ, C.ITEM_SEQ
		) T
		JOIN (
		SELECT
		A.EVAL_COMPANY_SEQ,
		SUM(B.SCORE) / #{userCntTotal} AS TOTAL_SUM,
		DENSE_RANK() OVER (ORDER BY SUM(B.SCORE) / #{userCntTotal} DESC) AS RANK
		FROM DJ_EVAL_COMPANY A
		JOIN DJ_EVAL_ITEM_RESULT B
		ON A.EVAL_COMPANY_SEQ = B.EVAL_COMPANY_SEQ
		AND A.COMMITTEE_SEQ = #{COMMITTEE_SEQ}
		AND B.ACTIVE = 'Y'
		JOIN DJ_EVAL_COMMITTEE_ITEM C
		ON B.ITEM_SEQ = C.ITEM_SEQ
		AND C.ACTIVE = 'Y'
		JOIN DJ_EVAL_COMMISSIONER D
		ON B.COMMISSIONER_SEQ = D.COMMISSIONER_SEQ
		AND D.EVAL_SAVE = 'Y'
		AND D.CONFIRM_YN = 'Y'
		AND D.CONTACT = 'N'
		AND D.ATTEND_YN = 'Y'
		AND D.EVAL_AVOID = 'N'
		GROUP BY A.EVAL_COMPANY_SEQ
		) TOTALS
		ON T.EVAL_COMPANY_SEQ = TOTALS.EVAL_COMPANY_SEQ
		GROUP BY T.EVAL_COMPANY_SEQ
		ORDER BY EVAL_COMPANY_SEQ , TOTAL_SUM DESC
	</select>
	
	<select id="getEvalConfirmData2" parameterType="map" resultType="map">
	    /*getEvalConfirmData*/
		SELECT 
		T.*
		, #{userCnt} AS USER_CNT
		, #{userCntTotal} AS USER_CNT_TOTAL
		, SUM(T.SUM_SCORE) TOTAL_SUM
		
		<foreach collection="colList" item="col">
			, MAX(CASE WHEN T.ITEM_SEQ = #{col.item_seq} THEN T.SUM_SCORE END) AS ITME_SCORE_#{col.item_seq}
		</foreach>
		FROM (
		SELECT 
		A.EVAL_COMPANY_SEQ
		, A.DISPLAY_TITLE
		, C.SCORE
		, C.ITEM_NAME
		, C.ITEM_SEQ
		, SUM(B.SCORE) AS SUM_SCORE
		FROM DJ_EVAL_COMPANY A
		JOIN DJ_EVAL_ITEM_RESULT B
		ON A.EVAL_COMPANY_SEQ = B.EVAL_COMPANY_SEQ
		AND A.COMMITTEE_SEQ = #{COMMITTEE_SEQ}
		AND B.ACTIVE = 'Y'
		
<!--		<if test="userCnt &gt; 5">-->
<!--			AND B.RANK_CODE = 'Y'-->
<!--		</if>-->
		
		JOIN DJ_EVAL_COMMITTEE_ITEM C
		ON B.ITEM_SEQ = C.ITEM_SEQ
		AND C.ACTIVE = 'Y'
		JOIN DJ_EVAL_COMMISSIONER D
		ON B.COMMISSIONER_SEQ = D.COMMISSIONER_SEQ
        AND D.EVAL_SAVE = 'Y'
        AND D.CONFIRM_YN = 'Y'
		AND D.CONTACT = 'N'
		AND D.ATTEND_YN = 'Y'
		GROUP BY A.EVAL_COMPANY_SEQ, C.ITEM_SEQ ) T
		GROUP BY T.EVAL_COMPANY_SEQ
	</select>
	
	<select id="getItemColList" parameterType="map" resultType="map">
	/*getItemColList*/
		<!-- SELECT * FROM DJ_EVAL_COMMITTEE_ITEM WHERE COMMITTEE_SEQ = #{COMMITTEE_SEQ} AND ACTIVE = 'Y' -->
		
		select 
        item_seq, 
        committee_seq, 
        item_name, 
        item_medium_name, 
        item_small_name, 
        score, 
        active, 
        eval_type, 
        create_date, 
        score_1, 
        score_2, 
        score_3, 
        score_4, 
        score_5, 
        IFNULL(BIG_ITEM_SUM_SCORE,LAG(BIG_ITEM_SUM_SCORE) OVER(ORDER BY T.ITEM_SEQ)) AS big_item_sum_score
        FROM
        (SELECT A.*,
        IFNULL(B.SUM_SCORE,LAG(B.SUM_SCORE) OVER(ORDER BY A.ITEM_SEQ)) AS BIG_ITEM_SUM_SCORE
		FROM DJ_EVAL_COMMITTEE_ITEM A
		LEFT JOIN (SELECT *,SUM(SCORE) AS SUM_SCORE FROM DJ_EVAL_COMMITTEE_ITEM WHERE COMMITTEE_SEQ = #{COMMITTEE_SEQ} AND ACTIVE = 'Y' GROUP BY ITEM_NAME ORDER BY ITEM_SEQ) B
		ON A.ITEM_SEQ = B.ITEM_SEQ
		WHERE A.COMMITTEE_SEQ = #{COMMITTEE_SEQ} AND A.ACTIVE = 'Y') T
	</select>
	
	<update id="setRankCode" parameterType="map">
	/*setRankCode*/
		CALL SP_DJ_EVAL_RESULT_RANK(#{COMMITTEE_SEQ})
	</update>
	
	<update id="setEvalJangConfirm" parameterType="map">
	/*setEvalJangConfirm*/
		UPDATE DJ_EVAL_COMMITTEE SET 
		JANG_CONFIRM_YN = 'Y' 
		, STEP = 'S' 
		WHERE COMMITTEE_SEQ = #{committee_seq}
	</update>
	
	<select id="getEvalCompany" parameterType="map" resultType="map">
	/*getEvalCompany*/
		SELECT * FROM DJ_EVAL_COMPANY WHERE COMMITTEE_SEQ = #{COMMITTEE_SEQ}
	</select>
	
	<select id="getEvalResultList" parameterType="map" resultType="map">
	/*getEvalResultList*/
		SELECT 
		B.*
		, D.NAME
		, C.EVAL_SAVE
		, C.CONTACT
		, IFNULL(SUM(B.SCORE), 0) AS scoreSum
		<foreach collection="colList" item="col">
			, IFNULL(MAX(CASE WHEN B.ITEM_SEQ = #{col.item_seq} THEN B.SCORE END), 0) AS ITME_SCORE_#{col.item_seq}
			, MAX(CASE WHEN B.ITEM_SEQ = #{col.item_seq} THEN B.RANK_CODE END) AS RANK_CODE_#{col.item_seq}
		</foreach>
		FROM DJ_EVAL_COMPANY A
		JOIN DJ_EVAL_ITEM_RESULT B
		ON A.EVAL_COMPANY_SEQ = B.EVAL_COMPANY_SEQ
		AND A.COMMITTEE_SEQ = #{COMMITTEE_SEQ}
		AND A.EVAL_COMPANY_SEQ = #{EVAL_COMPANY_SEQ}
		AND B.ACTIVE = 'Y'
		JOIN DJ_EVAL_COMMISSIONER C
		ON B.COMMISSIONER_SEQ = C.COMMISSIONER_SEQ
		AND C.ACTIVE = 'Y'
		AND C.CONFIRM_YN = 'Y'
		JOIN DJ_COMMISSIONER_POOL D
		ON C.COMMISSIONER_POOL_SEQ = D.COMMISSIONER_POOL_SEQ
		AND D.ACTIVE = 'Y'
		GROUP BY B.COMMISSIONER_SEQ
	</select>

	<select id="getEvalResultTotal" parameterType="map" resultType="map">
	/*getEvalResultTotal*/
		SELECT 
		T.EVAL_COMPANY_SEQ
		, #{userCnt} AS USER_CNT
		<foreach collection="colList" item="col">
			, IFNULL(MAX(CASE WHEN T.ITEM_SEQ = #{col.item_seq} THEN T.TOTAL / #{userCntTotal} END), 0) AS ITME_SCORE_#{col.item_seq}
		</foreach>
		FROM 
		(SELECT 
		A.EVAL_COMPANY_SEQ
		, B.ITEM_SEQ
        <choose>
            <when test='userCnt > 5 or score_yn == "Y"'>
                ,SUM(SCORE) - MAX(SCORE) - MIN(SCORE) TOTAL
            </when>
            <otherwise>
                ,SUM(SCORE) TOTAL
            </otherwise>
        </choose>

        FROM DJ_EVAL_COMPANY A
		JOIN DJ_EVAL_ITEM_RESULT B
		ON A.EVAL_COMPANY_SEQ = B.EVAL_COMPANY_SEQ
		AND A.COMMITTEE_SEQ = #{COMMITTEE_SEQ}
		AND A.EVAL_COMPANY_SEQ = #{EVAL_COMPANY_SEQ}
		AND B.ACTIVE = 'Y'
		
		<if test="userCnt &gt; 5">
			AND B.RANK_CODE = 'Y'
		</if>
		
		JOIN DJ_EVAL_COMMISSIONER C
		ON B.COMMISSIONER_SEQ = C.COMMISSIONER_SEQ
        AND C.EVAL_SAVE = 'Y'
		AND C.ACTIVE = 'Y'
		AND C.CONFIRM_YN = 'Y'
        AND C.CONTACT = 'N'
        AND C.ATTEND_YN = 'Y'
        AND C.EVAL_AVOID = "N"
		JOIN DJ_COMMISSIONER_POOL D
		ON C.COMMISSIONER_POOL_SEQ = D.COMMISSIONER_POOL_SEQ
		AND D.ACTIVE = 'Y'
		GROUP BY B.ITEM_SEQ ) T
	</select>
	
	<update id="evalSaveUpdate" parameterType="map">
	/*evalSaveUpdate*/
		UPDATE DJ_EVAL_COMMISSIONER SET EVAL_SAVE = 'Y' WHERE COMMISSIONER_SEQ = #{commissioner_seq}
	</update>

	<insert id="insertPdfMain" parameterType="PdfEcmMainVO">
	/*insertPdfMain*/
		INSERT INTO C_PDF_DUZON_APPDOC(
		REP_ID
		, COMP_SEQ
		, DEPT_SEQ
		, EMP_SEQ
		, PDF_PATH
		, PDF_NAME
		, STATUS_CD
		, REQ_DT
		)VALUES(
		#{rep_id}
		, '1000'
		, '1'
		, '1'
		, #{pdf_path}
		, #{pdf_name}
		, #{status_cd}
		, NOW()
		)
	</insert>

	<insert id="insertPdfFile" parameterType="pdfEcmFileVO">
	/*insertPdfFile*/
		INSERT INTO C_PDF_DUZON_FILE(
		REP_ID
		, COMP_SEQ
		, DOC_ID
		, DOC_NO
		, DOC_PATH
		, DOC_NAME
		, DOC_EXT
		)VALUES(
		#{rep_id}
		, '1000'
		, #{doc_id}
		, #{doc_no}
		, #{doc_path}
		, #{doc_name}
		, #{doc_ext}
		)
	</insert>
	
	<update id="setEvalPassword">
	/*setEvalPassword*/
		UPDATE DJ_EVAL_ID SET 
		EVAL_USER_PW = HEX(AES_ENCRYPT(fn_getRandomTxt(6), 'EVAL'))
		WHERE EVAL_ID_SEQ NOT IN (SELECT B.EVAL_ID_SEQ FROM DJ_EVAL_COMMITTEE A
									JOIN DJ_EVAL_COMMISSIONER B
									ON A.COMMITTEE_SEQ = B.COMMITTEE_SEQ
									AND A.ACTIVE = 'Y'
									AND B.ACTIVE = 'Y'
									AND B.EVAL_ID_SEQ IS NOT NULL
									AND (A.EVAL_S_DATE >= DATE_FORMAT(NOW(), '%Y%m%d') or A.EVAL_E_DATE >= DATE_FORMAT(NOW(), '%Y%m%d'))
									)
	</update>
	
	<update id="setEvalIdDel">
	/*setEvalIdDel*/
		UPDATE DJ_EVAL_COMMISSIONER SET 
		EVAL_ID_SEQ = NULL
		WHERE COMMISSIONER_SEQ NOT IN (SELECT COMMISSIONER_SEQ FROM (
										(SELECT B.COMMISSIONER_SEQ FROM DJ_EVAL_COMMITTEE A
											JOIN DJ_EVAL_COMMISSIONER B
											ON A.COMMITTEE_SEQ = B.COMMITTEE_SEQ
											AND A.ACTIVE = 'Y'
											AND B.ACTIVE = 'Y'
											AND (A.EVAL_S_DATE >= DATE_FORMAT(NOW(), '%Y%m%d') or A.EVAL_E_DATE >= DATE_FORMAT(NOW(), '%Y%m%d'))
											)
                                    	) T 
                                       )
	</update>
	
	<update id="setPurcReqUpdate" parameterType="map">
		<selectKey order="BEFORE" keyProperty="req_state" resultType="string">
			SELECT REQ_STATE FROM DJ_PURC_REQ WHERE PURC_REQ_ID = #{purc_req_id}
		</selectKey>
		/*setPurcReqUpdate*/
		UPDATE DJ_PURC_REQ
		SET REQ_STATE = CASE WHEN #{req_state} = 142 THEN 149
						WHEN #{req_state} = 152 THEN 159
						ELSE #{req_state} END
		WHERE PURC_REQ_ID = #{purc_req_id}
	</update>
	
	<insert id="setEvalIdDelLog">
	/*setEvalIdDelLog*/
		INSERT INTO DJ_EVAL_ID_LOG(EVAL_ID_SEQ, COMMISSIONER_POOL_SEQ, CREATE_DATE)
		SELECT B.EVAL_ID_SEQ, B.COMMISSIONER_POOL_SEQ, NOW() 
		FROM DJ_EVAL_COMMITTEE A
		JOIN DJ_EVAL_COMMISSIONER B
		ON A.COMMITTEE_SEQ = B.COMMITTEE_SEQ
		AND A.ACTIVE = 'Y'
		AND B.ACTIVE = 'Y'
		AND (A.EVAL_S_DATE >= DATE_FORMAT(NOW(), '%Y%m%d') or A.EVAL_E_DATE >= DATE_FORMAT(NOW(), '%Y%m%d'))
	</insert>
	
	<update id="setCommDetailUpdate" parameterType="map">
	/*setCommDetailUpdate*/
		UPDATE CUST_EPIS.DJ_COMMISSIONER_POOL A JOIN DJ_COMMISSIONER_DETAIL B
		ON A.COMMISSIONER_POOL_SEQ = B.COMMISSIONER_POOL_SEQ
		SET A.BIRTH_DATE = REPLACE(#{birth_date}, '-', '')
		, B.ORG_NAME = #{org_name}
		, B.BANK_NO = #{bank_no}
		, B.BANK_CD = #{bank_cd}
		, B.BANK_NAME = #{bank_name}
		, B.ORG_ADDR1 = #{addr}
		WHERE A.COMMISSIONER_POOL_SEQ = (SELECT COMMISSIONER_POOL_SEQ FROM DJ_EVAL_COMMISSIONER WHERE COMMISSIONER_SEQ = #{commissioner_seq})
		AND A.ACTIVE = 'Y'
	</update>

	<!--<update id="setEvalPayUpdate" parameterType="map">
	/*setEvalPayUpdate*/
		UPDATE DJ_EVAL_COMMISSIONER SET
		CONTACT = 'Y'
		, EVAL_SAVE = 'N'
		WHERE COMMISSIONER_SEq = #{commissioner_seq}
	</update>-->

	<update id="setEvalPayUpdate" parameterType="map">
		/*setEvalPayUpdate*/
		UPDATE DJ_EVAL_COMMISSIONER SET
		CONTACT = 'Y',
		EVAL_AVOID = 'Y',
		EVAL_AVOID_TXT = '사전접촉',
		EVAL_JANG = 'N' ,
		ATTEND_YN = 'N' ,
		EVAL_SAVE = 'N'
		WHERE COMMISSIONER_SEq = #{commissioner_seq}
	</update>
	
	<select id="getCommitteeJangName" parameterType="map" resultType="string">
	/*getCommitteeJangName*/
		SELECT B.NAME FROM DJ_EVAL_COMMISSIONER A
		JOIN DJ_COMMISSIONER_POOL B
		ON A.COMMISSIONER_POOL_SEQ = B.COMMISSIONER_POOL_SEQ
		AND A.COMMITTEE_SEQ = #{COMMITTEE_SEQ}
		AND B.ACTIVE = 'Y'
		AND A.ACTIVE = 'Y'
		AND A.EVAL_JANG = 'Y'
	</select>
	
	<select id="getCompanyTotal" parameterType="map" resultType="map">
	/*getCompanyTotal*/
		SELECT 
		 sum(B.SCORE) as real_score
         , A.DISPLAY_TITLE
         , A.EVAL_COMPANY_SEQ
		 FROM DJ_EVAL_COMPANY A
		JOIN DJ_EVAL_ITEM_RESULT B
		ON A.EVAL_COMPANY_SEQ = B.EVAL_COMPANY_SEQ
		AND B.ACTIVE = 'Y'
		AND B.COMMISSIONER_SEQ = #{COMMISSIONER_SEQ}
		AND A.COMMITTEE_SEQ = #{COMMITTEE_SEQ}
		JOIN DJ_EVAL_COMMITTEE_ITEM C
		ON B.ITEM_SEQ = C.ITEM_SEQ
		AND C.ACTIVE = 'Y'
        GROUP BY A.EVAL_COMPANY_SEQ
		ORDER BY A.EVAL_COMPANY_SEQ, C.ITEM_SEQ
	</select>
	
	<update id="evalMod" parameterType="map">
	/*evalMod*/
		UPDATE DJ_EVAL_COMMISSIONER SET
		EVAL_SAVE = 'N'
		WHERE COMMISSIONER_SEQ = #{commissioner_seq}
	</update>
	
	<select id="evalConfirmYn" parameterType="map" resultType="string">
	/*evalConfirmYn*/
		SELECT EVAL_CONFIRM FROM DJ_EVAL_COMMISSIONER WHERE COMMISSIONER_SEQ = #{commissioner_seq}
	</select>
	
	<update id="setJangEvalPayUpdate" parameterType="map">
	/* setJangEvalPayUpdate */
		UPDATE DJ_EVAL_COMMISSIONER SET
		EVAL_PAY = (EVAL_PAY + #{evalCm})
		WHERE COMMISSIONER_SEQ = #{commissioner_seq}
	</update>

	<update id="setEvalAvoidY" parameterType="map">
		UPDATE
		    DJ_EVAL_COMMISSIONER
		SET
			EVAL_AVOID = 'Y',
			EVAL_AVOID_TXT = #{eval_avoid_txt},
			<if test='EVAL_JANG.equals("Y")'>
			EVAL_JANG = 'N',
			</if>
			ATTEND_YN = 'N'
		WHERE
		    COMMISSIONER_SEQ = #{COMMISSIONER_SEQ}
	</update>

	<update id="setEvalJangReSelected" parameterType="map">
		UPDATE
			DJ_EVAL_COMMISSIONER
		SET
			EVA_JANG_CHK = 'N'
		WHERE
		    COMMITTEE_SEQ = #{COMMITTEE_SEQ}
	</update>

	<select id="getEvalCommittee" parameterType="map" resultType="map">
		/*getEvalCompany*/
		SELECT * FROM DJ_EVAL_COMMITTEE WHERE COMMITTEE_SEQ = #{COMMITTEE_SEQ}
	</select>

    <select id="getEvalCommittee2" parameterType="map" resultType="map">
        /*getEvalCompany*/
        SELECT * FROM CUST_EPIS.DJ_EVAL_COMMISSIONER WHERE COMMISSIONER_SEQ = #{commissioner_seq}
    </select>

	<select id="evalProposalModFileDownload" parameterType="map" resultType="map">
		/*evalProposalModFileDownload*/
		SELECT A.*
			 , (SELECT TITLE FROM CUST_EPIS.DJ_EVAL_COMMITTEE WHERE COMMITTEE_SEQ = A.COMMITTEE_SEQ) TITLE
			 , (SELECT NAME FROM CUST_EPIS.DJ_COMMISSIONER_POOL WHERE COMMISSIONER_POOL_SEQ = A.COMMISSIONER_POOL_SEQ) NAME
		FROM CUST_EPIS.DJ_EVAL_COMMISSIONER A
		where COMMISSIONER_SEQ = #{commissioner_seq} AND active = "Y"
	</select>

	<select id="getEvalCommissionerEvalMinuteChk" resultType="map" parameterType="map">
		SELECT
		    COUNT(*) AS TOTAL,
			(SELECT COUNT(*) FROM CUST_EPIS.DJ_EVAL_COMMISSIONER WHERE COMMITTEE_SEQ = #{committee_seq} AND CONFIRM_YN = "Y" AND ATTEND_YN = "Y" AND EVAL_AVOID = "N" AND ACTIVE = "Y") AS TOTAL_COMMISSIONER,
			(SELECT COUNT(*) FROM CUST_EPIS.DJ_EVAL_COMMISSIONER WHERE COMMITTEE_SEQ = #{committee_seq} AND SIGN_2_MINUTE1 IS NOT NULL AND EVAL_AVOID = 'N' AND ACTIVE = "Y") AS MINUTE1_IS_NULL_TOTAL,
			(SELECT COUNT(*) FROM (SELECT COUNT(*) FROM CUST_EPIS.DJ_EVAL_COMMISSIONER WHERE COMMITTEE_SEQ = #{committee_seq} AND CONFIRM_YN = "Y" AND ATTEND_YN = "Y" AND EVAL_AVOID = "N" AND ACTIVE = "Y" GROUP BY SIGN_2_MINUTE1)A) AS MINUTE1_GROUP,
			(SELECT COUNT(*) FROM (SELECT COUNT(*) FROM CUST_EPIS.DJ_EVAL_COMMISSIONER WHERE COMMITTEE_SEQ = #{committee_seq} AND CONFIRM_YN = "Y" AND ATTEND_YN = "Y" AND EVAL_AVOID = "N" AND ACTIVE = "Y" GROUP BY SIGN_2_MINUTE2)A) AS MINUTE1_GROUP2
		FROM CUST_EPIS.DJ_EVAL_COMMISSIONER
		WHERE
			COMMITTEE_SEQ = #{committee_seq}
	</select>

	<update id="getEvalMinuteChKGroupFailUpd2" parameterType="map">
		UPDATE
			CUST_EPIS.DJ_EVAL_COMMISSIONER
		SET
			SIGN_2_MINUTE1 = NULL,
			SIGN_2_MINUTE2 = NULL,
			SIGN_2 = 'N'
		WHERE
			COMMITTEE_SEQ = #{committee_seq}
	</update>

	<update id="getEvalMinuteChKGroupFailUpd" parameterType="map">
		UPDATE
			CUST_EPIS.DJ_EVAL_COMMISSIONER
		SET
			SIGN_2 = 'N'
		WHERE
			COMMITTEE_SEQ = #{committee_seq}
	</update>

	<update id="setScoreData" parameterType="map">
		UPDATE
			CUST_EPIS.DJ_EVAL_ITEM_RESULT
		SET
			SCORE = #{score}
		WHERE
			COMMISSIONER_SEQ = #{commissioner_seq} AND EVAL_COMPANY_SEQ = #{eval_company_seq} AND ITEM_SEQ = #{item_seq}
	</update>

	<select id="getCommissionerChk" parameterType="map" resultType="map">
		SELECT
		    *
		FROM CUST_EPIS.DJ_EVAL_COMMISSIONER
		WHERE
		    COMMITTEE_SEQ = #{committee_seq}
		AND
			COMMISSIONER_SEQ != #{commissioner_seq}
        AND
		    ATTEND_YN = "Y" AND EVAL_AVOID = "N" AND CONTACT = "N" AND ACTIVE = "Y"
	</select>

	<select id="getEvalAvoidFailChk" parameterType="map" resultType="map">
		/* getEvalAvoidCountChk */
		SELECT FN_EVAL_AVOID_FAIL_CHECK(#{COMMITTEE_SEQ}) AS avoidFailChk;
	</select>

	<update id="setEvalCommissionerBlindUpd" parameterType="map">
		UPDATE
			CUST_EPIS.DJ_EVAL_COMMISSIONER
		SET
			EVAL_BLIND_YN = #{evalBlindYn}
		WHERE
			COMMITTEE_SEQ = #{committee_seq}
	</update>

	<select id="getSignList" parameterType="map" resultType="map">
		SELECT
			A.COMMISSIONER_SEQ
			, A.COMMITTEE_SEQ
			, A.EVA_JANG_CHK
			, A.SIGN_1
			, A.SIGN_2
			, A.SIGN_3
			, A.SIGN_4
			, A.SIGN_5
			, A.SIGN_6
			, A.SIGN_7
			, A.SIGN_8
			, A.SIGN_9
			, A.SIGN_10
			, A.CONTACT
			, A.SIGN_DIR
			, A.EVAL_CONFIRM
			, A.EVAL_JANG
			, A.TRANS_PAY
			, A.EVAL_PAY
			, A.EVAL_SAVE
			, A.EVAL_AVOID
			, C.NAME
			, C.BIRTH_DATE
			, D.BIZ_TYPE_ARRAY
			, D.TITLE
			, D.JANG_CONFIRM_YN
			, DATE_FORMAT(D.EVAL_S_DATE, '%Y-%m-%d') AS EVAL_S_DATE2
			, DATE_FORMAT(D.EVAL_E_DATE, '%Y-%m-%d') AS EVAL_E_DATE2
			, DATE_FORMAT(D.EVAL_S_DATE, '%Y년 %m월 %d일') AS EVAL_S_DATE3
			, DATE_FORMAT(D.EVAL_E_DATE, '%Y년 %m월 %d일') AS EVAL_E_DATE3
			, REPLACE(E.ORG_NAME, '\n', ' ') AS ORG_NAME
			, E.ORG_GRADE
			, E.BANK_NAME
			, E.BANK_NO
			, REPLACE(E.ORG_ADDR1, '\n', ' ') AS ORG_ADDR1
			, REPLACE(E.ORG_ADDR2, '\n', ' ') AS ORG_ADDR2
			, D.EVAL_CM
			, D.RATES
			, D.JOIN_SELECT_TYPE
			, D.PURC_REQ_ID
			, EVAL_ID AS EVAL_USER_ID
			, (SELECT CASE WHEN COUNT(1) = 0 THEN 'N' ELSE 'Y' END FROM DJ_EVAL_COMMISSIONER WHERE COMMITTEE_SEQ = D.COMMITTEE_SEQ AND EVAL_JANG = 'Y') AS JANG
			, EVAL_BLIND_YN
		FROM CUST_EPIS.DJ_EVAL_COMMISSIONER A
		JOIN CUST_EPIS.DJ_COMMISSIONER_POOL C
		ON A.COMMISSIONER_POOL_SEQ = C.COMMISSIONER_POOL_SEQ
		AND C.ACTIVE = 'Y'
		JOIN CUST_EPIS.DJ_EVAL_COMMITTEE D
		ON A.COMMITTEE_SEQ = D.COMMITTEE_SEQ
		AND C.ACTIVE = 'Y'
		JOIN CUST_EPIS.DJ_COMMISSIONER_DETAIL E
		ON C.COMMISSIONER_POOL_SEQ = E.COMMISSIONER_POOL_SEQ
		WHERE D.COMMITTEE_SEQ = #{committeeSeq}
		AND A.ACTIVE = 'Y'
		AND A.CONFIRM_YN = 'Y'
		AND A.ATTEND_YN = 'Y'
		AND A.EVAL_JANG = 'N'
	</select>
</mapper>