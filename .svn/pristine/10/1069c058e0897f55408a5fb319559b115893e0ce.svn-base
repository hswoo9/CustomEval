package com.duzon.custom.common.utiles;

import com.jcraft.jsch.*;
import org.apache.commons.io.IOUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletResponse;
import java.io.*;
import java.util.*;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

public class CommFileUtil {
	private static final Logger logger = LoggerFactory.getLogger(CommFileUtil.class);

	public static void outputStream(HttpServletResponse response,FileInputStream in ) throws Exception {
		ServletOutputStream binaryOut = response.getOutputStream();
		byte buffer[] = new byte[8 * 1024];
		
		try {
			IOUtils.copy(in, binaryOut);
			binaryOut.flush();
		} catch ( Exception e ) {
		} finally {
			if (in != null) {
				try {
				in.close();
				}catch(Exception e ) {}
			}
			if (binaryOut != null) {
				try {
					binaryOut.close();
				}catch(Exception e ) {}
			}
		}	
	}

	private String uploadPath = "/usr/local/apache-tomcat-8.5.59/webapps/upload/";
	private String ADDRESS = "121.186.165.80";
	private int PORT = 22;
	private String USERNAME = "root";
	private String PASSWORD = "dev123!@#";
	private static Session session = null;
	private static Channel channel = null;
	private static ChannelSftp channelSftp = null;

	public CommFileUtil() throws Exception {
		init();
	}

	public void init() throws Exception {
		JSch jsch = new JSch();
		session = jsch.getSession(USERNAME, ADDRESS, PORT);
		session.setPassword(PASSWORD);

		java.util.Properties config = new java.util.Properties();
		config.put("StrictHostKeyChecking", "no");
		session.setConfig(config);
		session.connect();
		channel = session.openChannel("sftp");
		channel.connect();

		channelSftp = (ChannelSftp) channel;
		boolean result = channelSftp.isConnected();  //접속여부를 리턴한다.(true/false)
		logger.info("접속여부 확인"+result);
	}


	public Map<String, Object> setServerMFSave(MultipartFile request, String basePath) {
		SftpATTRS attrs = null;

		String originFileName = null; // 원본파일이름
		String originFileExt  = null; // 원본 파일 확장자
		String storedFileName = null; // 저장될 이름
		String fileExt        = null; // 파일확장자

		Map<String, Object> listMap = null;

		String filePath = uploadPath + basePath;

		logger.info("========= filePath : "+filePath + " =========");

		// 경로 생성
		try {

			// 업로드할 파일이 있는지 체크
			if(!request.isEmpty() && request.getSize() > 0 && request != null) {
				MultipartFile multipartFile = request;

				boolean isUpload = false;

				// 파일용량 0이상만 업로드 ( 업로드사이즈 제한에 걸리지 않으면 업로드시작 )
				if(multipartFile.getSize() > 0) {
					originFileName = multipartFile.getOriginalFilename();
					originFileExt = originFileName.substring(originFileName.lastIndexOf("."));
					logger.info("========= originFileName : "+originFileName + "========= ");

					fileExt = originFileName.substring(originFileName.lastIndexOf(".") + 1, originFileName.length());
					fileExt = fileExt.toLowerCase();
					logger.info("========= fileExt : "+fileExt + "========= ");

					if(fileExt != ""){
						isUpload = true;
					}

					logger.info("========= isUpload : "+isUpload+" ========= ");

					if(isUpload) {
						//String serverFilePath = SERVER_DIR + basePath;
						String serverFilePath = "/home/upload/" + basePath;

						storedFileName = UUID.randomUUID() + originFileExt;
						File originStoredFile = File.createTempFile(storedFileName.replace(originFileExt, ""), originFileExt);
						multipartFile.transferTo(originStoredFile);

						try {
							attrs = channelSftp.stat(serverFilePath.replace("\\\\", "/").replace("\\", "/"));
						}catch (Exception e){ }

						if (attrs == null) {
							channelSftp.mkdir(serverFilePath.replace("\\\\", "/").replace("\\", "/"));
						}

						channelSftp.cd(serverFilePath.replace("\\\\", "/").replace("\\", "/"));
						channelSftp.put(new FileInputStream(originStoredFile), storedFileName);
						originStoredFile.delete();

						listMap = new HashMap<String, Object>();
						listMap.put("fileExt", fileExt);
						listMap.put("fileOrgName", originFileName.split("[.]")[0]);
						listMap.put("fileUUID", storedFileName);
						listMap.put("fileSize", multipartFile.getSize());
						listMap.put("filePath", "http:\\\\121.186.165.80:8010\\upload\\" + basePath + "/");
					}
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		return listMap;
	}

	public void setServerSFSave(String fileStr, String basePath, String fileName, String ext) {
		SftpATTRS attrs = null;

		String originFileName = fileName; // 원본파일이름
		String originFileExt  = ext; // 원본 파일 확장자

		try {
			File file = File.createTempFile(originFileName, "." + ext);
			FileOutputStream lFileOutputStream = new FileOutputStream(file);
			lFileOutputStream.write(fileStr.getBytes("UTF-8"));
			lFileOutputStream.close();

			if(fileStr != "" && fileStr.length() > 0 && fileStr != null) {
				boolean isUpload = false;
				if(originFileExt != ""){
					isUpload = true;
				}

				if(isUpload) {
					String serverFilePath = "/home/upload/" + basePath;

					try {
						attrs = channelSftp.stat(serverFilePath);
					}catch (Exception e){ }

					if (attrs == null) {
						channelSftp.mkdir(serverFilePath);
					}

					channelSftp.cd(serverFilePath);
					channelSftp.put(new FileInputStream(file), originFileName + "." + originFileExt);
					file.delete();
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}
