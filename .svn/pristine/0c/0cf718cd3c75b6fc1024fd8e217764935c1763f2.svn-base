<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML>
<HEAD>
<TITLE> KM701 Series ActiveX 테스트 </TITLE>
<script language="javascript">
	
	// sImageType :	0 - bmp
	//				1 - gif
	//				2 - jpg
	//				3 - png
	//				4 - tif
	var sImageType = 3;
	
	var PinCount = 0;
        /// connect 유무(0:disconnect, 1:connect)
	var conn     = 0;	
        /// sign 중 상태(0:서명중 아님, 1:서명중)
        var SignIng  = 0;


function sleep(ms) 
{ 
	var cur = new Date(); 
	var tgt = cur.getTime() + (ms) 
	while (true) 
	{ 
		cur = new Date(); 
		if (cur.getTime() > tgt) return; 
	} 
} 


/// 연결
/// 0) 성공 1) 서명기 인식 오류(모델 이상)  2) 서명패드 연결 상태를 확인 요망  3) 서명 패드에 이미 접속 중임
function OnConnectDevice()
{
	var nRtn = KM701.SetOpen();
	
	if ( nRtn == 0 )
	{
		alert('연결 성공');
		conn = 1;
	}
	else if ( nRtn == 1 )
	{
		alert('서명기 인식 오류(모델 이상)');	
                conn = 0;
	}
	else if ( nRtn == 2 )
	{
		alert('서명패드 연결 상태를 확인 요망');
		conn = 0;
	}
	else if ( nRtn == 3 )
	{
		alert('서명패드에 이미 연결 상태임');
		conn = 1;
	}
}


/// 연결끊기
function OnDisconnectDevice()
{	
	KM701.SetClose();

	conn = 0;

	alert('연결을 끊었습니다');
}


/// 서명 입력(실시간 Auto View)
function OnSignStartAutoView1()
{	
	var nRtn;

	if	( conn == 1 )	// 연결 상태인 경우
	{
		KM701.SetLcdClean();
		KM701.SetLcdText(22, 2, "서명을 입력");
		KM701.SetLcdText(22, 5, "하여 주세요!");
		
		KM701.SetSignImagePath("C:\\SignData\\", "Temp", 4);

		//// 서명 시작
		nRtn = KM701.SetStartRealTimeSignAutoView(1, "감사 합니다!!");	
		//// 0) 성공 1) 에러 2) 응답 없음 3) 이미 서명 진행 상태 4) 서명 패드와 접속 안된 상태
		if ( nRtn == 0 )
		{
		   alert('요청 성공'); 
		}
		else if ( nRtn == 1 )
		{
		   alert('에러 발생');
		}	
		else if( nRtn == 2 )
		{
		   alert('응답 없음');
		}	
		else if( nRtn == 3 )
		{
		   alert('이미 서명 진행 상태임');
		}	
		else if( nRtn == 4 )
		{
		   alert('서명 패드와 접속 안된 상태임');
		}	
	}
	else      // 연결이 안 되어있는 경우
	{
		alert('연결 후 사용하십시오.');
	}
}


/// 서명 입력(실시간 Auto View)
function OnSignStartAutoView2()
{	
	var nRtn;

	if	( conn == 1 )	// 연결 상태인 경우
	{
		KM701.SetLcdClean();
		KM701.SetLcdText(22, 2, "서명을 입력");
		KM701.SetLcdText(22, 5, "하여 주세요!");
		
		KM701.SetSignImagePath("C:\\SignData\\", "Temp", 4);

		//// 서명 시작
		nRtn = KM701.SetStartRealTimeSignAutoView(2, "감사 합니다!!");	
		//// 0) 성공 1) 에러 2) 응답 없음 3) 이미 서명 진행 상태 4) 서명 패드와 접속 안된 상태
		if ( nRtn == 0 )
		{
		   alert('요청 성공'); 
		}
		else if ( nRtn == 1 )
		{
		   alert('에러 발생');
		}	
		else if( nRtn == 2 )
		{
		   alert('응답 없음');
		}	
		else if( nRtn == 3 )
		{
		   alert('이미 서명 진행 상태임');
		}	
		else if( nRtn == 4 )
		{
		   alert('서명 패드와 접속 안된 상태임');
		}	
	}
	else      // 연결이 안 되어있는 경우
	{
		alert('연결 후 사용하십시오.');
	}
}


/// Sign Line Width(펜두께)
function OnSignLineWidth()
{
	var nRtn;

	if	( conn == 1 )	// 연결 성공인 경우
	{
		var slw = signlinewidth.value;              /// Sign Line Width 얻음
		nRtn = KM701.SetSignWidt(slw);	            /// Sign Line Width를 지정한다
		if	( nRtn != 0 )
		{
			alert('Sign Line Width(펜두께) 요청 실패');
		}
		else
		{
			alert('Sign Line Width(펜두께) 요청 성공');
		}	
	}
	else
	{
		alert('연결 후 사용하십시오.');
	}
}


/// 폰트 설정
function OnSetFontType()
{
	var nRtn;

	if	( conn == 1 )	// 연결 성공인 경우
	{
		var fnt = fonttype.value;                      /// 폰트 값 얻음
		nRtn = KM701.SetFontChange(fnt);	       /// 폰트를 지정한다
		if	( nRtn != 2 )
		{
			alert('폰트 지정 요청 실패');
		}
		else
		{
			alert('폰트 지정 요청 성공');
		}	
	}
	else
	{
		alert('연결 후 사용하십시오.');
	}
}


/// Language 얻기
function OnGetLanguage()
{
	var nRtn;

	if	( conn == 1 )	// 연결 성공인 경우
	{
		nRtn = KM701.GetModelLanguage();	            /// Language를 얻는다
		if	( nRtn == 1 )
		{
			alert('한글');
		}
		else	
		{
			alert('영문');
		}	
	}
	else
	{
		alert('연결 후 사용하십시오.');
	}
}


/// Language 설정
function OnSetLanguage()
{
	var nRtn;

	if	( conn == 1 )	// 연결 성공인 경우
	{
		var lng = language.value;                           /// Language 얻음
		nRtn = KM701.SetLanguageChange(lng);	            /// Language를 지정한다
		if	( nRtn != 2 )
		{
			alert('Language 변경 요청 실패');
		}
		else
		{
			alert('Language 변경 요청 성공');
		}	
	}
	else
	{
		alert('연결 후 사용하십시오.');
	}
}


/// LCD 밝기 설정
function OnSetLcdPower()
{
	var nRtn;

	if	( conn == 1 )	// 연결 성공인 경우
	{
		var lpw = lcdpower.value;                      /// lcd power값 얻음
		nRtn = KM701.SetLcdPower(lpw);	       	       /// lcd power값을 지정한다
		if	( nRtn != 2 )
		{
			alert('LCD 밝기 요청 실패');
		}
		else
		{
			alert('LCD 밝기 요청 성공');
		}	
	}
	else
	{
		alert('연결 후 사용하십시오.');
	}
}


/// Auto Complete Time(서명대기시간-초) 설정
/// 0초를 입력하면 사용 안하는 것임
function OnAutoCompleteTime()
{
	var nRtn;

	if	( conn == 1 )	// 연결 성공인 경우
	{
		var act = autocompletetime.value;                      /// Auto Complete Time 얻음
		if	( act == '0' )		/// 서명대기시간 사용 안함
		{
			nRtn = KM701.SetSignTime(1, act);	            /// Auto Complete Time - 사용 안함으로 지정한다
		}
		else				/// 서명대기시간 사용
		{
			nRtn = KM701.SetSignTime(2, act - 1);	            /// Auto Complete Time 지정한다(지정한 값에서 1 뺀 값을 넣는다)
		}

		if	( nRtn != 0 )
		{
			alert('Auto Complete Time 요청 실패');
		}
		else
		{
			alert('Auto Complete Time 요청 성공');
		}	
	}
	else
	{
		alert('연결 후 사용하십시오.');
	}
}


/// LCD backlight(초) 설정
/// 0초를 입력하면 사용 안하는 것임
function OnSetLcdBackLight()
{
	var nRtn;

	if	( conn == 1 )	// 연결 성공인 경우
	{
		var lbl = lcdbacklight.value;                      /// LCD backlight 얻음
		if	( lbl == '0' )		/// LCD backlight 사용 안함
		{
			nRtn = KM701.SetBacklight(1, lbl);	            /// LCD backlight - 사용 안함으로 지정한다
		}
		else				/// LCD backlight 사용
		{
			nRtn = KM701.SetBacklight(2, lbl);	            /// LCD backlight 지정한다
		}

		if	( nRtn != 0 )
		{
			alert('LCD backlight 요청 실패');
		}
		else
		{
			alert('LCD backlight 요청 성공');
		}	
	}
	else
	{
		alert('연결 후 사용하십시오.');
	}
}



/// 모델명 얻기
function OnGetModelName()
{
	if	( conn == 1 )	// 연결 성공인 경우
	{
		modelname.value = "";
		modelname.value = KM701.GetNameData();		/// 모델명 얻음

		alert('모델명을 확인하세요');
	}
	else
	{
		alert('연결 후 사용하십시오.');
	}
}


/// 버전 얻기
function OnGetVersion()
{
	if	( conn == 1 )	// 연결 성공인 경우
	{
		version.value = "";
		version.value = KM701.GetModelVersion();		/// 버전 얻음

		alert('버전을 확인하세요');
	}
	else
	{
		alert('연결 후 사용하십시오.');
	}
}


/// 터치 포인트 설정
function OnSetTouchSetting()
{
	var nRtn;

	if	( conn == 1 )	// 연결 성공인 경우
	{
		nRtn = KM701.SetTouchSetting();		/// 터치 포인트 설정

		alert('터치 포인트 설정하세요');
	}
	else
	{
		alert('연결 후 사용하십시오.');
	}
}


/// 로고 이미지 전송
function OnSetPreviewLogo()
{
	if	( conn == 1 )	// 연결 성공인 경우
	{
		var filename = imagefile.value;        /// 이미지 파일명 얻음
    		alert(filename);
		var nRtn = KM701.SetBitMap(1, filename);	//// 이미지 전송
		KM701.SetLcdDisplay();		                //// 화면 리플레이스
		if	( nRtn == 0 )
		{
			alert('로고 이미지 전송 성공 하였습니다');
		}
		else
		{
			alert('로고 이미지 전송에 실패 하였습니다');
		}
	}
	else
	{
		alert('연결 후 사용하십시오.');
	}
}


/// 로고 이미지 화면 변경
function OnSetUserLogoChange()
{
	if	( conn == 1 )	// 연결 성공인 경우
	{
		var filename = imagefile.value;        /// 이미지 파일명 얻음
    		alert(filename);
		var nRtn = KM701.SetLogoBitMap(1, filename);	//// 이미지 설정
		if	( nRtn == 0 )
		{
			KM701.SetLogoChange(2);		//// 두번째 이미지 위치에 지정
			alert('로고 이미지 화면 변경 성공 하였습니다');
		}
		else
		{
			alert('로고 이미지 화면 변경에 실패 하였습니다');
		}
	}
	else
	{
		alert('연결 후 사용하십시오.');
	}
}


/// 기본 로고 이미지 화면으로 변경
function OnSetDefaultLogo()
{
	if	( conn == 1 )	// 연결 성공인 경우
	{
		var nRtn = KM701.SetLogoChange(1);	//// 기본 로고 이미지 화면 설정
		if	( nRtn == 0 )
		{
			alert('기본 로고 이미지 화면 변경 성공 하였습니다');
		}
		else
		{
			alert('기본 로고 이미지 화면 변경에 실패 하였습니다');
		}
	}
	else
	{
		alert('연결 후 사용하십시오.');
	}
}


/// 핀패드 시작
function OnStartPinpad()
{	
	if	( conn == 1 )	// 연결 성공인 경우
	{
		readPin.value = "";
		PinCount = 0;

		var nRtn = KM701.SetStartPinInput("감사 합니다!!");	// 번호 입력 요청.
		if	( nRtn != 0 )
		{
			alert('핀패드 요청 실패');
		}
	}
	else
	{
		alert('연결 후 사용하십시오.');
	}
}

/// 이미지 파일을 Base64 인코딩한 문자열 얻기
function OnGetBase64Image()
{	
	if	( conn == 1 )	// 연결 성공인 경우
	{
		imagebase64.value = "";
		imagebase64.value = KM701.GetBase64Image();	// 얻기 요청.
	}
	else
	{
		alert('연결 후 사용하십시오.');
	}
}


// 문자열 자르기    
function getStrCuts(str, max)
{
	var ns = str.substr(0, max);
	if(ns.length != str.length)
	{
		ns = ns + "";
	}
	return ns;
}

</script>



<SCRIPT language="JAVASCRIPT" for="KM701" event="EventSignButton(nCh)">   // 서명패드(서명입력) 버튼 이벤트
    // nCh 의 값을 체크하여 서명패드의 입력된 버튼을 확인.
    // nCh : 1(확인) 2(재입력, 정정)

    if	( nCh == 1 )  // 확인 버튼 클릭 시
    {
        //imagebase64.value = KM701.GetBase64Image();

    	alert('입력 완료');
    }
    else if( nCh == 2 ) 	// 정정 버튼 클릭 시
    {
    	alert('서명 정정');	
    }

</SCRIPT>

<SCRIPT language="JAVASCRIPT" for="KM701" event="EventPinpad(nType, sData)">		// 핀패드 입력시 해당 데이터값이 이벤트로 전달된다.
	// 핀패드 입력시 클릭 정보 이벤트 발생
	// nCh 설명 : 	1 - 숫자, * , # 버튼
	//				2 - 핀패드 확인 버튼
	//				3 - 핀패드 정정 버튼

	
	if ( nType == 1 )	// 숫자, * , # 입력 정보
	{
		readPin.value = readPin.value + sData; 
		PinCount++;	// 입력된 숫자 카운트 증가
	}
	else if( nType == 2 )	// 번호 입력 완료 버튼
	{
		alert('번호 입력을 완료하였습니다');
	}
	else if( nType == 3 ) 	// 번호 입력 정정 버튼
	{
		if ( PinCount > 0 )
		{
			readPin.value = getStrCuts(readPin.value, PinCount - 1);
			PinCount = PinCount - 1;	// 입력된 핀패드 카운트 감소
		}
	}
	
</SCRIPT>

<SCRIPT language="JAVASCRIPT" for="KM701" event="EventPadStatus(nCh)">
	if(nCh == 1)	// 서명패드 USB 연결 해제됨.
	{
		OnDisconnectDevice();	// 연결해제 이벤트 발생시 반드시 실행해야함.
		alert('USB 연결이 해제되었습니다');
		location.reload();
	}
	else if(nCh == 2)	// 서명패드 USB 재연결됨.
	{
		alert('USB 연결이 재연결 되었습니다');
	}
</SCRIPT>
	
</HEAD>
<BODY>
<BODY bgcolor = #AAAAAA onbeforeunload="OnDisconnectDevice();">
<font color="yellow">
<H1>KM701 Series ActiveX 테스트</H1>
</font>

<H2>Signature Capture 테스트</H2>

<OBJECT ID="KM701" CLASSID="CLSID:B3EE583E-01F0-422F-8D8C-475D414FADF6" CODEBASE="KM701OCX.cab#version=1,0,0,1" STYLE="WIDTH:300px; HEIGHT:160px; ">
</OBJECT>
<p>
	<input type="button" onclick="OnConnectDevice();" value="연결">
	<input type="button" onclick="OnDisconnectDevice();" value="끊기">
        <br><br>
	<input type="button" onclick="OnSignStartAutoView1();" value="실시간 서명 입력-1배보기">
	<input type="button" onclick="OnSignStartAutoView2();" value="실시간 서명 입력-2배보기">
        <br>
        <input type="button" onclick="OnGetModelName();" value="모델명 얻기">
	<input type="text" name="modelname" size="20">
	<br>
        <input type="button" onclick="OnGetVersion();" value="버전 얻기">
	<input type="text" name="version" size="20">
	<br>
	<H5>Sign Line Width(펜두께)</H5>
        <select name="signlinewidth">
           <option value="1">1</option>
           <option value="2">2</option>
	   <option value="3">3</option>
	</select>
	<input type="button" onclick="OnSignLineWidth();" value="적용">
	<H5>폰트 설정</H5>
        <select name="fonttype">
           <option value="1">바탕체</option>
           <option value="2">궁서체</option>
	   <option value="3">돋움체</option>
	</select>
        <input type="button" onclick="OnSetFontType();" value="적용">
        
	<H5>Auto Complete Time(서명대기시간-초) 설정</H5>
        <input type="text" name="autocompletetime" size="2" value="10">
        <input type="button" onclick="OnAutoCompleteTime();" value="적용">

	<H5>Language 설정</H5>
	<input type="button" onclick="OnGetLanguage();" value="설정된 Language 얻기">
	<select name="language">
           <option value="1">한글</option>
           <option value="2">영문</option>
	</select>
        <input type="button" onclick="OnSetLanguage();" value="적용">

	<H5>LCD 밝기 설정</H5>
        <select name="lcdpower">
           <option value="1">1</option>
           <option value="2">2</option>
	   <option value="3">3</option>
           <option value="4">4</option>
	</select>
        <input type="button" onclick="OnSetLcdPower();" value="적용">

	<H5>LCD Backlight(초) 설정</H5>
        <input type="text" name="lcdbacklight" size="2" value="10">
        <input type="button" onclick="OnSetLcdBackLight();" value="적용">

	<H5>터치 포인트 설정</H5>
        <input type="button" onclick="OnSetTouchSetting();" value="적용">	
        <br>

        <H5>대기 화면 로고이미지 지정</H5>
	<input type="text" name="imagefile" size="40" value="C:\\temp\\logo.bmp">
        <input type="button" onclick="OnSetPreviewLogo();" value="이미지 전송">
        <input type="button" onclick="OnSetUserLogoChange();" value="화면 변경">
        <input type="button" onclick="OnSetDefaultLogo();" value="기본 화면으로 변경">
	<br>

	<H2>Pinpad input Test</H2>
	<input type="text" name="readPin" size="15"> 
	<input type="button" onclick="OnStartPinpad();" value="전화번호 입력">
	<br>

	<H5>Image Base64 값</H5>
	<input type="button" onclick="OnGetBase64Image();" value="얻기">
        <input type="text" name="imagebase64" size="3000" value="">
</BODY>
</HTML>

